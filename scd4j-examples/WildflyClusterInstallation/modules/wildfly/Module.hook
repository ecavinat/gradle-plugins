def baseDir = "/opt/scd4j-examples/WildflyClusterInstallation"
def wildflyDir = "$baseDir/wildfly-8.2.0.Final"
set("wildflyDir", wildflyDir)

def offset = get("portOffset") as int
def httpPort = 8080 + offset
set("httpPort", httpPort)

def nodeName = "standalone-$httpPort"
set("nodeName", nodeName)

def nodeDir = "$wildflyDir/$nodeName"
set("nodeDir", nodeDir)

pre {
	if(!exists(wildflyDir)) {
		checkJava()
		unzip('wildfly-8.2.0.Final.zip', baseDir)
	} else {
		log("Wildfly is already installed at $wildflyDir")
		stop("wildfly-${httpPort}")
	}
	
	if(!exists(nodeDir)) {
		cp("$wildflyDir/standalone", nodeDir)
	}
}


post {
	if(isLinux()) {
		if("Debian".equals(distribution()) || "Ubuntu".equals(distribution())) {
			ln("/etc/init.d/wildfly-${httpPort}", "$wildflyDir/bin/init.d/wildfly-init-debian-${httpPort}.sh")
		} else {
			ln("/etc/init.d/wildfly-${httpPort}", "$wildflyDir/bin/init.d/wildfly-init-redhat-${httpPort}.sh")
		}
	} else {
		run("$wildflyDir/bin/service/service-${httpPort}.bat install")
	}
	start("wildfly-${httpPort}")
	registryOnBoot("wildfly-${httpPort}")
}

void checkJava(){
    def java = get("java_home")
	if(!java.contains("1.7") && !java.contains("1.8")) {
		throw new RuntimeException("In this example, Java 1.7 OR Java 1.8 must be installed!");
	}
}