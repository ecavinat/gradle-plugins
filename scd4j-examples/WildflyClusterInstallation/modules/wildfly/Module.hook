def exampleDir = "/opt/scd4j-examples/WildflyCusterInstallation"
def wildflyHome = "$basedir/wildfly-8.2.0.Final"
set("wildflyHome", wildflyHome)

def offset = get("portOffset") as int
def httpPort = 8080 + offset
set("httpPort", httpPort)

def standaloneDir = "$wildflyHome/standalone"
def node = "standalone-$httpPort"
set("nodeName", node)

def nodeDir = "$wildflyHome/$node" 

pre {
	if(!exists(wildflyHome)) {
		checkJava()
		unzip('wildfly-8.2.0.Final.zip', exampleDir)
	} else {
		log("Wildfly is already installed at $wildflyHome")

		def st = status("wildfly")
		if(st.contains("running")) {
			stop("wildfly")
		}
	}
	
	if(!exists(nodeDir)) {
		cp(standaloneDir, nodeDir)
	}
}


post {
	if(isLinux()) {
		if("Ubuntu".equals(distribution())) {
			ln("/etc/init.d/wildfly-${httpPort}", "$wildflyHome/bin/init.d/wildfly-init-debian-${httpPort}.sh")
		} else {
			ln("/etc/init.d/wildfly-${httpPort}", "$wildflyHome/bin/init.d/wildfly-init-redhat-${httpPort}.sh")
		}
	} else {
		run("$wildflyHome/bin/service/service.bat install")
	}
	start("wildfly")
	registryOnBoot("wildfly")
}

void checkJava(){
    def java = get("java_home")
	if(!java.contains("1.7") && !java.contains("1.8")) {
		throw new RuntimeException("In this example, Java 1.7 OR Java 1.8 must be installed!");
	}
}